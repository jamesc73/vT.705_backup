#####################################################################
#   Macros
#####################################################################

###############################################################
# Print Start and End
###############################################################

[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customize for your slicer of choice
gcode:
    SET_PIN PIN=caselight VALUE=1                                                                  # Turn on caselights  
    {% set BED_TEMP = params.BED|int %}                                                            # Get bed, extruder, chamber temperature and build size from Slicer GCode
    {% set EXTRUDER_TEMP = params.EXTRUDER|int %}
    {% set CHAMBER_TEMP = params.CHAMBER|default(0)|int %}
    {% set FL_SIZE = params.SIZE|default("0_0_300_300")|string %}
    STATUS_HOMING
    SET_DISPLAY_TEXT MSG="Homing"
    CG28                                                                                           # Conditional Home
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z50 F6000         # Park in center of the bed at 50mm above bed
    {% if printer.extruder.temperature <180 %}                                                     # Preheat nozzle to 180
        M104 S180
    {% endif %}
    # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
    {% if params.BED|int > 90 %}
      SET_DISPLAY_TEXT MSG="Heating Bed to: {BED_TEMP}c"                                           # Displays info
      STATUS_HEATING                                                                               # Sets SB-leds to heating-mode
      M106 S128                                                                                    # Set part fan to 50%
      M190 S{BED_TEMP}                                                                             # Sets the target temp for the bed
      SET_DISPLAY_TEXT MSG="Heatsoak: {CHAMBER_TEMP}c"                                             # Displays info
      TEMPERATURE_WAIT SENSOR="temperature_sensor chamber_temp" MINIMUM={CHAMBER_TEMP}             # Waits for chamber to reach desired temp
    # If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
    {% else %}
      SET_DISPLAY_TEXT MSG="Heating Bed to: {BED_TEMP}c"                                           # Displays info
      STATUS_HEATING                                                                               # Sets SB-leds to heating-mode
      M190 S{BED_TEMP}                                                                             # Sets the target temp for the bed
      SET_DISPLAY_TEXT MSG="Heatsoak for 5min"                                                     # Displays info
      G4 P300000                                                                                   # Waits 5 min for the bedtemp to stabilize
    {% endif %}
    M106 S0                                                                                        # Turn off part fan
    SET_DISPLAY_TEXT MSG="Nozzle Heating"
    STATUS_HEATING
    M109 S{EXTRUDER_TEMP} T0                                                                       # Heat nozzle to final temperature
    ATTACH_PROBE_LOCK
    SET_DISPLAY_TEXT MSG="Z Tilt Adjust"
    STATUS_LEVELING
    G32
    G90                                                                                            # Absolute positioning
    SET_DISPLAY_TEXT MSG="Bed Mesh"
    STATUS_MESHING
    ADAPTIVE_BED_MESH SIZE={FL_SIZE}                                                               # Adaptive bed mesh
    DOCK_PROBE_UNLOCK
    SET_DISPLAY_TEXT MSG="Cleaning"
    STATUS_CLEANING
    CLEAN_NOZZLE                                                                                   # Purge and clean nozzle
    SET_DISPLAY_TEXT MSG="Z-Calibration"
    STATUS_CALIBRATING_Z
    CALIBRATE_Z                                                                                    # Set auto Z height
    PRIME_EXTRUDER

[gcode_macro PRIME_EXTRUDER]
gcode:
    G1 X85 Y0 Z0.3 F6000                                                                           # Move to prime position   
    G1 E5 F1500                                                                                    # Unretract
    G92 E0                                                                                         # Zero the extruder
    G1 X165 Y0 Z0.3 F2000 E8                                                                       # Draw the first line
    G1 X165 Y0.3 Z0.3 F2000                                                                        # Move back a little
    G1 X85 Y0.3 Z0.3 F2000 E16                                                                     # Draw the second line 
    G92 E0                                                                                         # Zero the extruder
    STATUS_PRINTING
    SET_DISPLAY_TEXT MSG="Printer go brrr"
    # SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END    
    M400                                                                                           # Wait for buffer to clear
    G92 E0                                                                                         # Zero the extruder
    G1 E-7 F1800                                                                                   # Retract filament
    TURN_OFF_HEATERS
    G90                                                                                            # Absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000                                                        # Move nozzle to remove stringing
    G0 X{th.axis_maximum.x - 50} Y{th.axis_maximum.y - 2} F3600                                    # Park nozzle at rear
    M107                                                                                           # Turn off fans
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    # SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
    STATUS_READY
    SET_DISPLAY_TEXT MSG="Printing Complete"
    SET_PIN PIN=caselight VALUE=0.10                                                               # Dim caselights
    BEEP I=3 DUR=200 FREQ=2000

###############################################################
# M600, Pause, Resume and Cancel
###############################################################

[pause_resume]

[gcode_macro M600]
gcode:
    PAUSE                                                                                          # Pause

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                         # Z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                                    # Set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}          # Set hotend temp variable for reference in resume macro

        # SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                        # Disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                                # Save current print position for resume
        BASE_PAUSE                                                                                 # Pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}             # Check that zhop doesn't exceed z max
            G91                                                                                    # Relative positioning
            G1 Z{z} F900                                                                           # Raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                        # If z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                        # Absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000         # Park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                            # Save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                                    # Turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                             # Set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                                        # Hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        # SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                                        # Enable filament sensor
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}                # Set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                                      # Wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                                   # Go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                                        # Relative positioning
        M83                                                                                        # Relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                              # Prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                                   # Lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                                        # Restore position
        BASE_RESUME                                                                                # Resume print
    {% endif %}

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}                    # Set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT

###############################################################
# Parking locations
###############################################################
# Park the toolhead at different places. Automatically determined based on your printer’s configured size.

# Park front center
[gcode_macro PARKFRONT]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                                                                                        # Home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90                                                                                            # Absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000        
    RESTORE_GCODE_STATE NAME=PARKFRONT

# Park front center, but low down.
[gcode_macro PARKFRONTLOW]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                                                                                        # Home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90                                                                                            # Absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000                                     
    RESTORE_GCODE_STATE NAME=PARKFRONT

# Park top rear left
[gcode_macro PARKREAR]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                                                                                        # Home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKREAR
    G90                                                                                            # Absolute positioning
    G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000     
    RESTORE_GCODE_STATE NAME=PARKREAR

# Park at center of build volume
[gcode_macro PARKCENTER]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                                                                                        # Home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKCENTER
    G90                                                                                            # Absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000    
    RESTORE_GCODE_STATE NAME=PARKCENTER

# Park 15mm above center of bed
[gcode_macro PARKBED]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                                                                                        # Home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKBED
    G90                                                                                            # Absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000                                     
    RESTORE_GCODE_STATE NAME=PARKBED

###############################################################
# Light control
###############################################################

[gcode_macro LIGHTS_ON]
description: Turn on caselights
gcode:
    SET_PIN PIN=caselight VALUE=1

[gcode_macro LIGHTS_OFF]
description: Turn off caselights
gcode:
    SET_PIN PIN=caselight VALUE=0

###############################################################
# Misc. Macros
###############################################################

[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    G28
    Z_TILT_ADJUST
    G28
    G0 X125 Y125 Z30 F3600
    RESTORE_GCODE_STATE NAME=STATE_G32
    M117

# # Disable filament sensor upon startup
# [delayed_gcode DISABLEFILAMENTSENSOR]
# initial_duration: 1
# gcode:
#     SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

# Conditional G28 (home if not already homed)
[gcode_macro CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
    G28
    {% endif %}

# Temperature wait for hotend
[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}                                # Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}                                 # Wait for hotend temp (within 1 degree)
    {% endif %}

[gcode_macro BEEP]
gcode:
    # Parameters
    {% set i = params.I|default(1)|int %}           ; Iterations (number of times to beep).
    {% set dur = params.DUR|default(100)|int %}     ; Duration/wait of each beep in ms. Default 100ms.
    {% set freq = params.FREQ|default(2000)|int %}  ; Frequency in Hz. Default 2kHz.

    {% for iteration in range(i|int) %}
        SET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }
        G4 P{dur}
        SET_PIN PIN=beeper VALUE=0
        G4 P{dur}
    {% endfor %}

###############################################################
# Backup to Github
###############################################################

[gcode_shell_command backup_to_github]
command: sh /home/pi/git_backup.sh
timeout: 30.
verbose: True

[gcode_macro GITHUB_BACKUP]
gcode:
    RUN_SHELL_COMMAND CMD=backup_to_github


