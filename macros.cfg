#####################################################################
#   Macros
#####################################################################

[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customize for your slicer of choice
gcode:
     SET_PIN PIN=caselight VALUE=1
#    {% set X_MAX = printer.toolhead.axis_maximum.x|default(100)|float %}     ;Get printer built volume dimensions
#    {% set Y_MAX = printer.toolhead.axis_maximum.y|default(100)|float %}
#    {% set Z_MAX = printer.toolhead.axis_maximum.z|default(100)|float %}     
    {% set BED_TEMP = params.BED|int %}                   ;Get bed, extruder and chamber temperature from Slicer GCode
    {% set EXTRUDER_TEMP = params.EXTRUDER|int %}
    {% set CHAMBER_TEMP = params.CHAMBER|default(0)|int %}
    {% set FL_SIZE = params.SIZE|default("0_0_300_300")|string %}
    STATUS_HOMING
    M117 Homing...
    CG28                      ;Conditional Home
    G1 x125 Y125 Z30 F3600    ;Park in middle of bed at 30mm above bed
    M117 Preheating...
    STATUS_HEATING
    M106 S128
    M190 S{BED_TEMP}                                 ;Preheat bed 
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber_temp" MINIMUM={CHAMBER_TEMP} ; Wait for chamber temp
    {% if printer.extruder.temperature <180 %}       ;Preheat nozzle
        M104 S180
    {% endif %}
    ATTACH_PROBE_LOCK
    M117 Leveling...
    STATUS_LEVELING
    G32
    G90
    M117 Bed Mesh...
    STATUS_MESHING
    ;BED_MESH_CALIBRATE           ;Bed mesh
    ADAPTIVE_BED_MESH SIZE={FL_SIZE}    ;Adaptive bed mesh
    DOCK_PROBE_UNLOCK
    M117 Nozzle Heating...
    STATUS_HEATING
    M109 S{EXTRUDER_TEMP} T0     ;Heat nozzle to final temperature
    M117 Cleaning
    STATUS_CLEANING
    CLEAN_NOZZLE
    M117 Z-Calibration..
    STATUS_CALIBRATING_Z
    CALIBRATE_Z                  ;Set auto Z height
    G1 X85 Y0 Z10 F3000         ;Move to prime position 
    STATUS_PRINTING
#    SET_NOZZLE_LEDS_OFF
    SET_NOZZLE_LEDS_ON
    M117 Printing
    PRIME_EXTRUDER

[gcode_macro PRIME_EXTRUDER]
gcode:
    G1 E5 F1500                      ;Unretract
    G1 Z0.28 F2000
    G92 E0
    G1 X165 Y0 Z0.28 F2000 E8        ;Draw the first line
    G1 X165 Y0.3 Z0.28 F2000         ;Move to the side a little
    G1 X85 Y0.3 Z0.28 F2000 E16      ;Draw the second line
    G92 E0


[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-7.5 F1800                 ; retract filament    
    TURN_OFF_HEATERS    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan    
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    STATUS_READY
    M117 Print Complete
    BEEP I=3 DUR=200 FREQ=2000
    SET_PIN PIN=caselight VALUE=0.25

###############################################################
# M600: Filament Change
###############################################################
# This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[pause_resume]

[gcode_macro M600]
gcode:
    {% set X = params.X|default(125)|float %}
    {% set Y = params.Y|default(25)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

#[gcode_macro PAUSE]
#description: Pause the current print
#rename_existing: BASE_PAUSE
#gcode:
    # Parameters
#    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount
    
#    {% if printer['pause_resume'].is_paused|int == 0 %}     
#        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
#        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro
                                
#        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor       
#        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume                
#        BASE_PAUSE                                                                           ; pause print
#        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
#            G91                                                                              ; relative positioning
#            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
#        {% else %}
#            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
#            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
#        {% endif %}
#        G90                                                                                  ; absolute positioning
#        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
#        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
#        M104 S0                                                                              ; turn off hotend
 #       SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
#    {% endif %}

#[gcode_macro RESUME]
#description: Resume the current print
#rename_existing: BASE_RESUME
#gcode:
    # Parameters
#    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)
    
#    {% if printer['pause_resume'].is_paused|int == 1 %}
#        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                         ; enable filament sensor
#        RESETRGB                                                                    ; reset LCD color
#        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
#        {% if etemp > 0 %}
#            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
#        {% endif %}
#        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
#        G91                                                                          ; relative positioning
#        M83                                                                          ; relative extruder positioning
#        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                                
#            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
#        {% else %}                      
#            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
#        {% endif %}                             
#        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
#        BASE_RESUME                                                                  ; resume print
#    {% endif %}

[gcode_macro CANCEL_PRINT]
description: Cancel the current print
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT

[gcode_macro LIGHTS_ON]
description: Turn on caselights
gcode:
    SET_PIN PIN=caselight VALUE=1

[gcode_macro LIGHTS_OFF]
description: Turn off caselights
gcode:
    SET_PIN PIN=caselight VALUE=0

[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    CG28
    Z_TILT_ADJUST
    G28 Z
    G0 X125 Y125 Z30 F3600
    RESTORE_GCODE_STATE NAME=STATE_G32
    M117

# Conditional G28 (home if not already homed)
[gcode_macro CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
    G28
    {% endif %}

# Temperature wait for hotend
[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}

# Temperature wait for bed
[gcode_macro M190]
rename_existing: M99190
gcode:
    #Parameters
    {% set s = params.S|float %}

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   ; Set bed temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}  ; Wait for bed temp (within 1 degree)
    {% endif %}

[gcode_macro BEEP]
gcode:
    # Parameters
    {% set i = params.I|default(1)|int %}           ; Iterations (number of times to beep).
    {% set dur = params.DUR|default(100)|int %}     ; Duration/wait of each beep in ms. Default 100ms.
    {% set freq = params.FREQ|default(2000)|int %}  ; Frequency in Hz. Default 2kHz.

    {% for iteration in range(i|int) %}
        SET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }
        G4 P{dur}
        SET_PIN PIN=beeper VALUE=0
        G4 P{dur}
    {% endfor %}

[gcode_shell_command backup_to_github]
command: sh /home/pi/git_backup.sh
timeout: 30.
verbose: True

[gcode_macro GITHUB_BACKUP]
gcode:
    RUN_SHELL_COMMAND CMD=backup_to_github

